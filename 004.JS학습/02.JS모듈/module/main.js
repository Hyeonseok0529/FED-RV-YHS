// 모듈 연습 메인 JS - main.js

// 데이터 JS 가져오기
import { mTitle } from "./text_data.js";
// 프리티어 자동완성시 JS파일 뒤에 확장자가 없는 것은
// SPA 노드개발환경에서 가능한 방식이다!
// 그러나 일반 JS 에서는 반드시 확장자 .js를 써야함!

console.log('확인:',mTitle);

// 1. 첫번째 요소 .tpart에 타이틀 데이터 출력하기

// 나의 함수 가져오기
// default로 내보낸 것은 어떤 변수로 받아도 가능함
// 그런데 내보낼때 쓴 변수를 일반적으로 사용함!

// import myFn from "./my_function.js";
// console.log('나의 함수 확인:',myFn);

// 내보낼 때 {}를 사용하여 내보내면
// 같은 변수명을 반드시 써야함!
// 그리고 받을 때 중괄호를 사용하여 받아야 함!

import {myFn} from "./my_function.js";
console.log('나의 함수 확인:',myFn);

// import 헐 from "./my_function.js";
// console.log('나의 함수 확인:',헐);

/**********************************************     
    [ import 형식 ]
    import 전달변수 from 파일경로;

    1. import문법을 쓰려면 호출하는 html script요소에
    type="module" 속성을 반드시 셋팅해야한다!

    2. 반드시 가져올 모듈JS에서 export를 해줘야함!

    3. from 뒤에 경로는 반드시 상대경로일 경우
    같은 위치일 지라도 ./ 표시를 꼭해야함!
    (없으면 안나옴!) (/,./,../ 표시필수)

    4. 모듈구성은 반드시 서버형식으로 열어야 작동한다!
    (http://...) Live Server로 열기때문에 볼 수 있음!
    -> 로컬파일로 열면 작동안됨!

    5. 모듈화의 모든 export 파일에서도 import는 가능하다!
    ____________________________________________________

    [ import의 사용방법 ]

    1. export default인 경우
        -> import 변수 from 경로
        ->>> 변수는 내가 지을 수 있음

    2. export {} 인 경우
        -> import {보내준변수명,...} from 경로

    ____________________________________________

    [ import 시 변수명 변경하기 : 별칭사용하기 ]

    import {전달변수 as 별칭} from 파일경로;
    예) import {mymymy as m} from 파일경로;
    -> 별칭 사용이유:  단순변경요구, 같은이름 변수 피하기

    ____________________________________________

    [ 모듈화를 위한 구성 ]
    1. 데이터 처리하기 위한 JS
    -> text_data.js
    2. 구체적인 데이터 구성처리를 위한 JS
    -> msg_format.js

***************************************************/