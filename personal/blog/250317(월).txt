// 2025_03_17 월요일

오늘은 리플로우와 리페인트에 대해 정리해보자.
(유튜버 프론트맨님의 영상을 참고하여 작성하였습니다.)

1. 리플로우란 무엇인가?
웹 페이지 내에서 요소의 위치 또는 크기에 변화가 있을 때, 변화된 레이아웃을 다시 계산하여 렌더 트리에 적용하는 과정.

크기(width, height, padding, margin, border-width ...)
위치(position, top, left ...)
레이아웃(display, flex ...)
폰트 크기(font-size, font-weight ...)

위와 같은 속성들이 리플로우를 유발하는 속성이다.
*렌더 트리(Render Tree)란 브라우저가 웹 페이지를 화면에 표시(render) 할 때 사용하는 내부 데이터 구조를 의미한다.

2. 리페인트란 무엇인가?
웹 페이지 내에서 요소의 시각적인 표현에 변화가 있을 때, 변화된 시각적 표현을 다시 계산하여 렌더 트리에 적용하는 과정

색상 관련 속성(color, background-color)
테두리 관련 속성(border-color, border-radius)

위와 같은 속성들이 리페인트를 유발하는 속성이다.

3. 리플로우와 리페인트의 성능상 차이점?
부모 노드의 레이아웃 변화는 자식 노드의 레이아웃까지 영향을 미치기 때문에, 리플로우는 리페인트와는 달리 발생시 하위 렌더 트리를 다시 계산하고 재구성하는 과정이 필요하다.

* 노드는 자료구조에서 각 데이터 요소(요소 간의 연결을 가진 단위)를 의미한다.

따라서, 리플로우는 그 자체로 부하가 큰 작업이다. 또한, 리플로우가 발생하면 보통 리페인트도 다시 발생하기 때문에, 성능에 큰 영향을 끼친다고 할 수 있으며, 렌더링 성능을 최적화하기 위해선 리플로우를 최소화 해야한다. 리플로우는 주로 CPU를 활용하여 연산하는 반면, 리페인트는 GPU를 활용한다는 차이도 있다.

* CPU는 컴퓨터의 두뇌 역할을 하는 핵심 부품인 중앙처리장치, GPU는 이미지 , 영상, 3D 그래픽 등을 빠르게 처리하는 그래픽처리장치이다.

4. 그럼 리플로우 최소화는 어떻게 하는가?
리플로우를 최소화하기 위해, DOM 업데이트를 하나로 묶어 Batch Update 하는 방법을 생각해볼 수 있다.

*Batch Update란 여러개의 업데이트 작업을 한번에 묶어서 실행하는 방식을 뜻한다. 개별적으로 처리하는 작업을, 여러 개의 데이터를 모아서 한꺼번에 처리하여 성능을 최적화하는 기법이다.

또한, offsetHeight, offsetWidth와 같은 자바스크립트의 레이아웃 속성에 여러 번 접근하면 리플로우가 발생할 수 있기 때문에, 이러한 속성들은 변수에 저장해두고 재사용해야한다.

그리고 가급적 레이아웃 변경이 적은 요소를 사용해야한다. position 속성을 예로 들면, fixed나 absolute 같은 값들을 사용할 수 있다.

그 외 레이아웃에 영향을 적게 주는 속성들(리플로우 최소화)

transform: 요소를 이동하거나 회전, 크기 조정할 때 사용 (예: translate, rotate, scale)
z-index: 요소의 stacking 순서를 변경하지만, 레이아웃에는 영향을 주지 않음.
position (absolute, fixed 등): 위치 지정은 레이아웃 계산을 유발하지 않음, top, left, right, bottom 속성은 레이아웃 계산을 해야 하지만 position 속성 자체는 리플로우를 발생시키지 않음.
margin, padding:
margin은 주변 요소와의 간격을 조절하지만 레이아웃을 변경하지 않으므로 리플로우에 영향을 주지 않음.
padding은 요소의 크기나 위치를 변경할 수 있지만, 부모 요소에 영향을 주지 않으면 리플로우가 발생하지 않을 수 있음.
visibility : visibility: hidden;은 요소를 숨기지만 레이아웃 공간을 차지하므로 리플로우를 발생시키지 않습니다. 반면 display: none;은 레이아웃에서 제거되어 리플로우를 유발합니다.