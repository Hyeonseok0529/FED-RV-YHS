// 2025_03_13 목요일

오늘은 React에서의 key에 대한 개념정리를 해보려고 한다.
(유튜브 프론트맨님의 영상의 설명을 그대로 참고하였다.)

1. React에서 사용되는 Key는 무엇인가?
Key는 리스트를 매핑하여 동일한 컴포넌트를 여러개 렌더링할 때 각 컴포넌트에 전달되는 고유한 값이다.

리스트를 매핑(Maping)한다는 것은, 주어진 배열의 각 항목을 변환하여 새로운 배열을 만드는 과정을 뜻한다.

컴포넌트? React에서 컴포넌트는 UI를 구성하는 독립적인 코드 블록으로, 화면에 표시될 내용을 정의하고 관리하는 단위이다. 리액트에서는 이런 컴포넌트들을 렌더링하는데, 여기서 렌더링은 UI를 화면에 출력하는 과정이라고 할 수 있다.

재조정 단계에서 각 노드의 key값들을 비교하여, 리스트에 추가, 삭제, 혹은 순서가 변경된 노드를 식별하고, 이를 통해 필요한 리렌더링(re-rendering)만 수행하기 위해 사용한다.

재조정 단계는 업데이트 렌더링이라고도 함.

2. 배열의 Index를 key값으로 하면 안되는 이유는?
순서가 변경되어도 동일한 key값이 유지되기 때문이다. A B C 순서대로 렌더링되어있던 컴포넌트가 C B A 순서로 변경되어도 key의 값(배열 index값이 key일 경우)은 동일하기 때문에, 재조정 단계에서 리렌더링 대상으로 식별하지 않을 가능성이 생긴다. 따라서 배열 내에서 순서가 변경되어도 각 컴포넌트의 key값이 변경되지 않는 고유한 값으로 설정해야 한다.

3. 고유한 key값이 없는 경우 대체 방법은?
컴포넌트에 전달되는 각 props를 적절히 조합하여 서로 겹치지 않는 id를 만드는 것이 효과적이다.

리액트에서 props(속성)는 컴포넌트 간에 데이터를 전달하는 방법이다. props는 컴포넌트의 속성으로, 부모 컴포넌트가 자식 컴포넌트에 전달하는 데이터를 나타낸다. 또 props는 읽기 전용으로, 자식 컴포넌트는 전달받은 props를 변경할 수 없고, 부모 컴포넌트가 props를 업데이트하면 해당 컴포넌트가 다시 렌더링 된다.

이런 방식으로도 고유한 id를 할당하기 어려운 경우에는, 랜덤한 UUID를 생성하여 key값으로 전달할 수 있다.

UUID(Universally Unique Identifier)는 전세계적으로 고유한 식별자를 생성하기 위한 표준을 뜻한다. Ex)f47ac10b-58cc-4372-a567-0e02b2c3d479

UUID는 128비트로 이루어져있기 때문에, 서로 겹칠 가능성이 극히 적다. 하지만 UUID는 16바이트라는 비교적 큰 사이즈를 갖고 있어 메모리 공간을 효율적으로 사용할 수 없다는 단점이 있다.

UUID 하나만 보기로는 그렇게 큰 데이터가 아닐 수 있지만 데이터베이스의 기본키(primary key)로 사용되면 각 레코드마다 16바이트를 추출해야해서 DB가 많으면 많을 수록 더 많은 공간낭비를 하게 된다(인덱싱 비용, 네트워크 전송 비용도 자동적으로 늘어난다).

// 오늘의 회고

오늘 이야기하려고 했던 디버그에 대한 이야기는 프로젝트에 신경써야할 부분들이 많아 프로젝트가 끝나는 시점에 정리해야할 듯 하다.

오늘 작업은 마이페이지에서 레벨에 대한 프로필을 클릭했을 때 카드가 나와서 자동회전하는 화면을 구현하고, 획득한 뱃지와 남은뱃지 분기했던 부분을 마저 마무리했다. 이제 기능들은 거의 마무리가 되어가고 있어서 남은 프로젝트 기간동안은 모듈화에 신경을 써보려고 한다.(원래는 모듈을 만들어서 끼우는 것이 맞지만 .. 리액트를 배우면서 프로젝트를 수행해야하니 어쩔 수 없는 선택이었다.)

많은 개념들을 폭포같이 쏟아져서 하나하나 정리해나가고 싶지만 순탄치만은 않다. 그래도 정리해야하만 한다고 생각한다. 내가 어디서 왜 쓰는지를 모르는데 어떻게 그 개념을 사용해서 구현을 하겠는가. 취업이 목표인 만큼 더욱, 매우 열심히 공부해야할 것 같다.

프로젝트 , 개념공부(면접준비) , 코딩테스트 , 정처기실기 , 이력서 , 포트폴리오 정비 ..
해야할게 많으니 조급하게 생각하지는 말고 내가 할 수 있는 최선의 효율을 뽑아야겠다.

개발자로 일하고 있는 모든 분들이 존경스러울 따름이다 ㅎ